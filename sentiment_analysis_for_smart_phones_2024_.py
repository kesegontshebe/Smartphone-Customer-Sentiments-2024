# -*- coding: utf-8 -*-
"""Sentiment Analysis for Smart phones 2024 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zzNEIiWKXkEtr-rr4NzIuM_zMvWPC-za
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk

#readdata

import csv

df = pd.read_csv('/content/Amazon Smart Phones Product Reviews and Rating dataset.csv')

df.head(5)

print(df.shape)

df['product_overall_rating'].value_counts().plot(kind='bar', title='number of reviews by stars', figsize=(10,5))

import nltk
nltk.download('vader_lexicon')

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

"""Run a polarity test on dataset

"""

from typing import Text
res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
  Text= row['review_description']
  myid = row['Unnamed: 0']
  res[i] = sia.polarity_scores(Text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Unnamed: 0'})
vaders = vaders.merge(df, how='left')
#display the first five rows of the data
display(vaders.head())

"""Plot Vader Results"""

ax=sns.barplot(data=vaders, x='product_overall_rating', y='compound')
ax=plt.title('compound Score by Amazon Star Review')
plt.show()

fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='product_overall_rating', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='product_overall_rating', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='product_overall_rating', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

!pip install transformers torch

!pip install tqdm
from tqdm.notebook import tqdm

from transformers import AutoTokenizer, AutoModelForSequenceClassification
from scipy.special import softmax
import numpy as np

# Use the Twitter-specific RoBERTa model for sentiment analysis
MODEL = "cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

def roberta_sentiment_analysis(text):
    if isinstance(text, float):  # Handle NaN values
        return {'roberta_neg': np.nan, 'roberta_neu': np.nan, 'roberta_pos': np.nan}

    encoded_text = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)
    output = model(**encoded_text)
    scores = output.logits.detach().numpy()
    scores = softmax(scores).flatten()

    return {
        'roberta_neg': scores[0],
        'roberta_neu': scores[1],
        'roberta_pos': scores[2]
    }

res_roberta = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row['review_description']
    res_roberta[i] = roberta_sentiment_analysis(text)

roberta_results = pd.DataFrame(res_roberta).T.reset_index().rename(columns={'index': 'Unnamed: 0'})
vaders = vaders.merge(roberta_results, how='left')

fig, axs = plt.subplots(1, 3, figsize=(15, 5))
sns.barplot(data=vaders, x='product_overall_rating', y='roberta_pos', ax=axs[0])
sns.barplot(data=vaders, x='product_overall_rating', y='roberta_neu', ax=axs[1])
sns.barplot(data=vaders, x='product_overall_rating', y='roberta_neg', ax=axs[2])
axs[0].set_title('Positive Sentiment')
axs[1].set_title('Neutral Sentiment')
axs[2].set_title('Negative Sentiment')
plt.tight_layout()
plt.show()

vaders.head()

vaders.columns

sns.pairplot(data=vaders, vars=['neg', 'neu', 'pos', 'roberta_neg', 'roberta_neu', 'roberta_pos'], hue= 'product_overall_rating', palette='tab10')
plt.show()

"""**Examples**"""

vaders.query('product_overall_rating == 3.9').sort_values('roberta_pos', ascending=False)['review_description'].values[0]

vaders.query('product_overall_rating == 3.9').sort_values('pos', ascending=False)['review_description'].values[0]

#negativereviews

vaders.query('product_overall_rating == 4.5').sort_values('roberta_neg', ascending=False)['review_description'].values[0]

vaders.query('product_overall_rating == 4.5').sort_values('neg', ascending=False)['review_description'].values[0]